<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://127.0.0.1:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://127.0.0.1:4000/" rel="alternate" type="text/html" /><updated>2016-04-14T00:04:40+08:00</updated><id>http://127.0.0.1:4000/</id><title>Jack Zhang</title><entry><title>iOS Dev Pit Records</title><link href="http://127.0.0.1:4000/blog/iOS-Dev-Pit-Records/" rel="alternate" type="text/html" title="iOS Dev Pit Records" /><published>2016-03-29T03:00:00+08:00</published><updated>2016-03-29T03:00:00+08:00</updated><id>http://127.0.0.1:4000/blog/iOS-Dev-Pit-Records</id><content type="html" xml:base="http://127.0.0.1:4000/blog/iOS-Dev-Pit-Records/">&lt;h1&gt;iOS Dev Pit Records&lt;/h1&gt;

&lt;h2&gt;1. How to add /usr/local/bin in $PATH on Mac&lt;/h2&gt;

&lt;p&gt;cd to &lt;code&gt;../etc/&lt;/code&gt;, then use &lt;code&gt;ls&lt;/code&gt; to make sure your &lt;code&gt;paths&lt;/code&gt; file is in, vim &lt;code&gt;paths&lt;/code&gt;, add &lt;code&gt;/usr/local/bin&lt;/code&gt; at the end of the file.&lt;/p&gt;</content><category term="iOS" /><summary>iOS Dev Pit Records</summary></entry><entry><title>iOS AppIcon Size</title><link href="http://127.0.0.1:4000/blog/iOS-AppIcon-Size-Summary/" rel="alternate" type="text/html" title="iOS AppIcon Size" /><published>2016-03-23T03:00:00+08:00</published><updated>2016-03-23T03:00:00+08:00</updated><id>http://127.0.0.1:4000/blog/iOS-AppIcon-Size-Summary</id><content type="html" xml:base="http://127.0.0.1:4000/blog/iOS-AppIcon-Size-Summary/">&lt;h1&gt;iOS AppIcon Size&lt;/h1&gt;

&lt;h2&gt;iPhone AppIcon&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;iPhone Spotlight - iOS 5,6: 58px@2x, 87px@3x&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iPhone Spotlight - iOS 7,8,9: 80px@2x, 120px@3x&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iPhone Settings - iOS 5,6,7,8,9: 58px@2x, 87px@3x&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iPhone App - iOS 7,8,9: 120px@2x, 180px@3x&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;iPad AppIcon&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;iPad Settings - iOS 5,6,7,8,9: 29px@1x, 58px@2x&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iPad Spotlight - iOS 7,8,9: 40px@1x, 80px@2x&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iPad App - iOS 76px@1x, 152px@2x&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iPad Pro App - iOS9: 167px@2x&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Common&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ItunesConnect: 1024px&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;iPhone: 58px, 80px, 87px, 120px, 180px&lt;br&gt;
iPad:29px, 40px, 58px, 76px, 80px, 152px, 167px&lt;br&gt;
itunesConnect: 1024px&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remark: 1pt = 2px&lt;/strong&gt;&lt;/p&gt;</content><category term="iOS" /><summary>iOS AppIcon Size</summary></entry><entry><title>Xcode Plugins</title><link href="http://127.0.0.1:4000/blog/Xcode-Plugins/" rel="alternate" type="text/html" title="Xcode Plugins" /><published>2016-03-23T03:00:00+08:00</published><updated>2016-03-23T03:00:00+08:00</updated><id>http://127.0.0.1:4000/blog/Xcode-Plugins</id><content type="html" xml:base="http://127.0.0.1:4000/blog/Xcode-Plugins/">&lt;h1&gt;Xcode Plugins&lt;/h1&gt;

&lt;h2&gt;Package Manager —— &lt;code&gt;Alcatraz&lt;/code&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install, Paste this into your terminal:&lt;br&gt;&lt;br&gt;
&lt;code&gt;curl -fsSL https://raw.githubusercontent.com/supermarin/Alcatraz/deploy/Scripts/install.sh | sh&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uninstall, Delete the plugin:&lt;br&gt;
&lt;code&gt;rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove all cached data:&lt;br&gt;&lt;br&gt;
&lt;code&gt;rm -rf ~/Library/Application\ Support/Alcatraz&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Plugin List&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;KSImageNamed&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Xcode plug-in that provides autocomplete for imageNamed: calls.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ksuther/KSImageNamed-Xcode&quot;&gt;https://github.com/ksuther/KSImageNamed-Xcode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;FuzzyAutocomplete&lt;/code&gt;&lt;br&gt;&lt;br&gt;
A Xcode 5+ plugin that adds more flexible autocompletion rather than just prefix-matching.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin&quot;&gt;https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;XToDo&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Xcode plugin to collect and list the &lt;code&gt;TODO&lt;/code&gt;,&lt;code&gt;FIXME&lt;/code&gt;,&lt;code&gt;???&lt;/code&gt;,&lt;code&gt;!!!!&lt;/code&gt;  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/trawor/XToDo&quot;&gt;https://github.com/trawor/XToDo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SCXcodeSwitchExpander&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Xcode plugin that enables switch cases autocompletion.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/stefanceriu/SCXcodeSwitchExpander&quot;&gt;https://github.com/stefanceriu/SCXcodeSwitchExpander&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;deriveddata-exterminator&lt;/code&gt;&lt;br&gt;&lt;br&gt;
A magic button in Xcode to exterminate the current project&amp;#39;s DerivedData directories.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kattrali/deriveddata-exterminator&quot;&gt;https://github.com/kattrali/deriveddata-exterminator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;VVDocumenter&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Xcode plug-in which helps you write documentation comment easier, for both Objective-C and Swift.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/onevcat/VVDocumenter-Xcode&quot;&gt;https://github.com/onevcat/VVDocumenter-Xcode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ClangFormat&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Xcode plug-in to to use clang-format from in Xcode and consistently format your code with Clang.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/travisjeffery/ClangFormat-Xcode&quot;&gt;https://github.com/travisjeffery/ClangFormat-Xcode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ColorSense&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Plugin for Xcode to make working with colors more visual.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/omz/ColorSense-for-Xcode&quot;&gt;https://github.com/omz/ColorSense-for-Xcode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="iOS" /><category term="Xcode" /><summary>Xcode Plugins</summary></entry><entry><title>UIFont FamilyNames FontNames</title><link href="http://127.0.0.1:4000/blog/UIFont-FamilyNames-FontNames/" rel="alternate" type="text/html" title="UIFont FamilyNames FontNames" /><published>2016-03-23T03:00:00+08:00</published><updated>2016-03-23T03:00:00+08:00</updated><id>http://127.0.0.1:4000/blog/UIFont-FamilyNames-FontNames</id><content type="html" xml:base="http://127.0.0.1:4000/blog/UIFont-FamilyNames-FontNames/">&lt;h1&gt;UIFont FamilyNames FontNames&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;for (NSString *fontFamilyName in [UIFont familyNames]){
    NSLog(@&amp;quot;familyName:&amp;#39;%@&amp;#39;&amp;quot;,fontFamilyName);
    for(NSString *fontName in [UIFont fontNamesForFamilyName:fontFamilyName])
    {
        NSLog(@&amp;quot;fontName:&amp;#39;%@&amp;#39;&amp;quot;,fontName);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;注：字体遍历结果如下：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2016-03-22 12:54:06.726 HTMF[3376:147526] familyName:&amp;#39;Copperplate&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.727 HTMF[3376:147526] fontName:&amp;#39;Copperplate-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.727 HTMF[3376:147526] fontName:&amp;#39;Copperplate&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.727 HTMF[3376:147526] fontName:&amp;#39;Copperplate-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.727 HTMF[3376:147526] familyName:&amp;#39;Heiti SC&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.727 HTMF[3376:147526] familyName:&amp;#39;Iowan Old Style&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.728 HTMF[3376:147526] fontName:&amp;#39;IowanOldStyle-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.728 HTMF[3376:147526] fontName:&amp;#39;IowanOldStyle-Roman&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.728 HTMF[3376:147526] fontName:&amp;#39;IowanOldStyle-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.728 HTMF[3376:147526] fontName:&amp;#39;IowanOldStyle-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.728 HTMF[3376:147526] familyName:&amp;#39;Kohinoor Telugu&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.728 HTMF[3376:147526] fontName:&amp;#39;KohinoorTelugu-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.728 HTMF[3376:147526] fontName:&amp;#39;KohinoorTelugu-Medium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.728 HTMF[3376:147526] fontName:&amp;#39;KohinoorTelugu-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.728 HTMF[3376:147526] familyName:&amp;#39;Thonburi&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.728 HTMF[3376:147526] fontName:&amp;#39;Thonburi&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.729 HTMF[3376:147526] fontName:&amp;#39;Thonburi-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.729 HTMF[3376:147526] fontName:&amp;#39;Thonburi-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.729 HTMF[3376:147526] familyName:&amp;#39;Heiti TC&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.730 HTMF[3376:147526] familyName:&amp;#39;Courier New&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.730 HTMF[3376:147526] fontName:&amp;#39;CourierNewPS-BoldMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.730 HTMF[3376:147526] fontName:&amp;#39;CourierNewPS-ItalicMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.730 HTMF[3376:147526] fontName:&amp;#39;CourierNewPSMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.730 HTMF[3376:147526] fontName:&amp;#39;CourierNewPS-BoldItalicMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.730 HTMF[3376:147526] familyName:&amp;#39;Gill Sans&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.730 HTMF[3376:147526] fontName:&amp;#39;GillSans-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.730 HTMF[3376:147526] fontName:&amp;#39;GillSans-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.731 HTMF[3376:147526] fontName:&amp;#39;GillSans-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.731 HTMF[3376:147526] fontName:&amp;#39;GillSans-LightItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.731 HTMF[3376:147526] fontName:&amp;#39;GillSans&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.731 HTMF[3376:147526] fontName:&amp;#39;GillSans-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.731 HTMF[3376:147526] fontName:&amp;#39;GillSans-SemiBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.731 HTMF[3376:147526] fontName:&amp;#39;GillSans-SemiBoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.731 HTMF[3376:147526] fontName:&amp;#39;GillSans-UltraBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.731 HTMF[3376:147526] familyName:&amp;#39;Apple SD Gothic Neo&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.732 HTMF[3376:147526] fontName:&amp;#39;AppleSDGothicNeo-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.732 HTMF[3376:147526] fontName:&amp;#39;AppleSDGothicNeo-Thin&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.732 HTMF[3376:147526] fontName:&amp;#39;AppleSDGothicNeo-UltraLight&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.732 HTMF[3376:147526] fontName:&amp;#39;AppleSDGothicNeo-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.732 HTMF[3376:147526] fontName:&amp;#39;AppleSDGothicNeo-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.732 HTMF[3376:147526] fontName:&amp;#39;AppleSDGothicNeo-Medium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.732 HTMF[3376:147526] fontName:&amp;#39;AppleSDGothicNeo-SemiBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.732 HTMF[3376:147526] familyName:&amp;#39;Marker Felt&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.733 HTMF[3376:147526] fontName:&amp;#39;MarkerFelt-Thin&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.733 HTMF[3376:147526] fontName:&amp;#39;MarkerFelt-Wide&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.733 HTMF[3376:147526] familyName:&amp;#39;Avenir Next Condensed&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.733 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.733 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-Heavy&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.733 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-Medium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.733 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.734 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-HeavyItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.734 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-MediumItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.734 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.734 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-UltraLightItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.734 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-UltraLight&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.734 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-DemiBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.734 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.734 HTMF[3376:147526] fontName:&amp;#39;AvenirNextCondensed-DemiBoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.734 HTMF[3376:147526] familyName:&amp;#39;Tamil Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.734 HTMF[3376:147526] fontName:&amp;#39;TamilSangamMN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.735 HTMF[3376:147526] fontName:&amp;#39;TamilSangamMN-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.735 HTMF[3376:147526] familyName:&amp;#39;Helvetica Neue&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.735 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.735 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.735 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-UltraLight&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.735 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-CondensedBlack&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.736 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.736 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-CondensedBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.736 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-Medium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.736 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.736 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-Thin&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.736 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-ThinItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.736 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-LightItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.736 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-UltraLightItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.736 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue-MediumItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.737 HTMF[3376:147526] fontName:&amp;#39;HelveticaNeue&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.737 HTMF[3376:147526] familyName:&amp;#39;Gurmukhi MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.737 HTMF[3376:147526] fontName:&amp;#39;GurmukhiMN-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.737 HTMF[3376:147526] fontName:&amp;#39;GurmukhiMN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.737 HTMF[3376:147526] familyName:&amp;#39;Times New Roman&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.737 HTMF[3376:147526] fontName:&amp;#39;TimesNewRomanPSMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.737 HTMF[3376:147526] fontName:&amp;#39;TimesNewRomanPS-BoldItalicMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.737 HTMF[3376:147526] fontName:&amp;#39;TimesNewRomanPS-ItalicMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.737 HTMF[3376:147526] fontName:&amp;#39;TimesNewRomanPS-BoldMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.738 HTMF[3376:147526] familyName:&amp;#39;Georgia&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.738 HTMF[3376:147526] fontName:&amp;#39;Georgia-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.738 HTMF[3376:147526] fontName:&amp;#39;Georgia&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.738 HTMF[3376:147526] fontName:&amp;#39;Georgia-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.738 HTMF[3376:147526] fontName:&amp;#39;Georgia-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.738 HTMF[3376:147526] familyName:&amp;#39;Apple Color Emoji&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.738 HTMF[3376:147526] fontName:&amp;#39;AppleColorEmoji&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.738 HTMF[3376:147526] familyName:&amp;#39;Arial Rounded MT Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] fontName:&amp;#39;ArialRoundedMTBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] familyName:&amp;#39;Kailasa&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] fontName:&amp;#39;Kailasa-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] fontName:&amp;#39;Kailasa&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] familyName:&amp;#39;Kohinoor Devanagari&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] fontName:&amp;#39;KohinoorDevanagari-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] fontName:&amp;#39;KohinoorDevanagari-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] fontName:&amp;#39;KohinoorDevanagari-Semibold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] familyName:&amp;#39;Kohinoor Bangla&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] fontName:&amp;#39;KohinoorBangla-Semibold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.739 HTMF[3376:147526] fontName:&amp;#39;KohinoorBangla-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.740 HTMF[3376:147526] fontName:&amp;#39;KohinoorBangla-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.740 HTMF[3376:147526] familyName:&amp;#39;Chalkboard SE&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.740 HTMF[3376:147526] fontName:&amp;#39;ChalkboardSE-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.740 HTMF[3376:147526] fontName:&amp;#39;ChalkboardSE-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.740 HTMF[3376:147526] fontName:&amp;#39;ChalkboardSE-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.740 HTMF[3376:147526] familyName:&amp;#39;Sinhala Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.740 HTMF[3376:147526] fontName:&amp;#39;SinhalaSangamMN-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.741 HTMF[3376:147526] fontName:&amp;#39;SinhalaSangamMN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.741 HTMF[3376:147526] familyName:&amp;#39;PingFang TC&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.741 HTMF[3376:147526] fontName:&amp;#39;PingFangTC-Medium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.741 HTMF[3376:147526] fontName:&amp;#39;PingFangTC-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.741 HTMF[3376:147526] fontName:&amp;#39;PingFangTC-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.741 HTMF[3376:147526] fontName:&amp;#39;PingFangTC-Ultralight&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.741 HTMF[3376:147526] fontName:&amp;#39;PingFangTC-Semibold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.741 HTMF[3376:147526] fontName:&amp;#39;PingFangTC-Thin&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.741 HTMF[3376:147526] familyName:&amp;#39;Gujarati Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] fontName:&amp;#39;GujaratiSangamMN-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] fontName:&amp;#39;GujaratiSangamMN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] familyName:&amp;#39;Damascus&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] fontName:&amp;#39;DamascusLight&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] fontName:&amp;#39;DamascusBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] fontName:&amp;#39;DamascusSemiBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] fontName:&amp;#39;DamascusMedium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] fontName:&amp;#39;Damascus&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] familyName:&amp;#39;Noteworthy&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] fontName:&amp;#39;Noteworthy-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.742 HTMF[3376:147526] fontName:&amp;#39;Noteworthy-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.743 HTMF[3376:147526] familyName:&amp;#39;Geeza Pro&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.743 HTMF[3376:147526] fontName:&amp;#39;GeezaPro&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.743 HTMF[3376:147526] fontName:&amp;#39;GeezaPro-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.743 HTMF[3376:147526] familyName:&amp;#39;Avenir&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.743 HTMF[3376:147526] fontName:&amp;#39;Avenir-Medium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.743 HTMF[3376:147526] fontName:&amp;#39;Avenir-HeavyOblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.743 HTMF[3376:147526] fontName:&amp;#39;Avenir-Book&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.744 HTMF[3376:147526] fontName:&amp;#39;Avenir-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.744 HTMF[3376:147526] fontName:&amp;#39;Avenir-Roman&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.744 HTMF[3376:147526] fontName:&amp;#39;Avenir-BookOblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.744 HTMF[3376:147526] fontName:&amp;#39;Avenir-Black&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.744 HTMF[3376:147526] fontName:&amp;#39;Avenir-MediumOblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.744 HTMF[3376:147526] fontName:&amp;#39;Avenir-BlackOblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.744 HTMF[3376:147526] fontName:&amp;#39;Avenir-Heavy&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.744 HTMF[3376:147526] fontName:&amp;#39;Avenir-LightOblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.744 HTMF[3376:147526] fontName:&amp;#39;Avenir-Oblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.745 HTMF[3376:147526] familyName:&amp;#39;Academy Engraved LET&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.745 HTMF[3376:147526] fontName:&amp;#39;AcademyEngravedLetPlain&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.745 HTMF[3376:147526] familyName:&amp;#39;Mishafi&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.745 HTMF[3376:147526] fontName:&amp;#39;DiwanMishafi&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.745 HTMF[3376:147526] familyName:&amp;#39;Futura&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.745 HTMF[3376:147526] fontName:&amp;#39;Futura-CondensedMedium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.745 HTMF[3376:147526] fontName:&amp;#39;Futura-CondensedExtraBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.745 HTMF[3376:147526] fontName:&amp;#39;Futura-Medium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.745 HTMF[3376:147526] fontName:&amp;#39;Futura-MediumItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.746 HTMF[3376:147526] familyName:&amp;#39;Farah&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.746 HTMF[3376:147526] fontName:&amp;#39;Farah&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.746 HTMF[3376:147526] familyName:&amp;#39;Kannada Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.746 HTMF[3376:147526] fontName:&amp;#39;KannadaSangamMN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.746 HTMF[3376:147526] fontName:&amp;#39;KannadaSangamMN-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.746 HTMF[3376:147526] familyName:&amp;#39;Arial Hebrew&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.746 HTMF[3376:147526] fontName:&amp;#39;ArialHebrew-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.747 HTMF[3376:147526] fontName:&amp;#39;ArialHebrew-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.747 HTMF[3376:147526] fontName:&amp;#39;ArialHebrew&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.747 HTMF[3376:147526] familyName:&amp;#39;Arial&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.747 HTMF[3376:147526] fontName:&amp;#39;ArialMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.747 HTMF[3376:147526] fontName:&amp;#39;Arial-BoldItalicMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.747 HTMF[3376:147526] fontName:&amp;#39;Arial-BoldMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.747 HTMF[3376:147526] fontName:&amp;#39;Arial-ItalicMT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.747 HTMF[3376:147526] familyName:&amp;#39;Party LET&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.747 HTMF[3376:147526] fontName:&amp;#39;PartyLetPlain&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.748 HTMF[3376:147526] familyName:&amp;#39;Chalkduster&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.748 HTMF[3376:147526] fontName:&amp;#39;Chalkduster&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.748 HTMF[3376:147526] familyName:&amp;#39;Hoefler Text&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.748 HTMF[3376:147526] fontName:&amp;#39;HoeflerText-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.748 HTMF[3376:147526] fontName:&amp;#39;HoeflerText-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.748 HTMF[3376:147526] fontName:&amp;#39;HoeflerText-Black&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.748 HTMF[3376:147526] fontName:&amp;#39;HoeflerText-BlackItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.749 HTMF[3376:147526] familyName:&amp;#39;Optima&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.749 HTMF[3376:147526] fontName:&amp;#39;Optima-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.749 HTMF[3376:147526] fontName:&amp;#39;Optima-ExtraBlack&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.749 HTMF[3376:147526] fontName:&amp;#39;Optima-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.749 HTMF[3376:147526] fontName:&amp;#39;Optima-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.749 HTMF[3376:147526] fontName:&amp;#39;Optima-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.750 HTMF[3376:147526] familyName:&amp;#39;Palatino&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.750 HTMF[3376:147526] fontName:&amp;#39;Palatino-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.750 HTMF[3376:147526] fontName:&amp;#39;Palatino-Roman&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.750 HTMF[3376:147526] fontName:&amp;#39;Palatino-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.750 HTMF[3376:147526] fontName:&amp;#39;Palatino-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.750 HTMF[3376:147526] familyName:&amp;#39;Lao Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.751 HTMF[3376:147526] fontName:&amp;#39;LaoSangamMN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.751 HTMF[3376:147526] familyName:&amp;#39;Malayalam Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.751 HTMF[3376:147526] fontName:&amp;#39;MalayalamSangamMN-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.751 HTMF[3376:147526] fontName:&amp;#39;MalayalamSangamMN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.751 HTMF[3376:147526] familyName:&amp;#39;Al Nile&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.751 HTMF[3376:147526] fontName:&amp;#39;AlNile-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.751 HTMF[3376:147526] fontName:&amp;#39;AlNile&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.751 HTMF[3376:147526] familyName:&amp;#39;Bradley Hand&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.752 HTMF[3376:147526] fontName:&amp;#39;BradleyHandITCTT-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.752 HTMF[3376:147526] familyName:&amp;#39;PingFang HK&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.752 HTMF[3376:147526] fontName:&amp;#39;PingFangHK-Ultralight&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.752 HTMF[3376:147526] fontName:&amp;#39;PingFangHK-Semibold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.752 HTMF[3376:147526] fontName:&amp;#39;PingFangHK-Thin&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.752 HTMF[3376:147526] fontName:&amp;#39;PingFangHK-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.752 HTMF[3376:147526] fontName:&amp;#39;PingFangHK-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.752 HTMF[3376:147526] fontName:&amp;#39;PingFangHK-Medium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.752 HTMF[3376:147526] familyName:&amp;#39;Trebuchet MS&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.752 HTMF[3376:147526] fontName:&amp;#39;Trebuchet-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.753 HTMF[3376:147526] fontName:&amp;#39;TrebuchetMS&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.753 HTMF[3376:147526] fontName:&amp;#39;TrebuchetMS-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.753 HTMF[3376:147526] fontName:&amp;#39;TrebuchetMS-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.753 HTMF[3376:147526] familyName:&amp;#39;Helvetica&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.753 HTMF[3376:147526] fontName:&amp;#39;Helvetica-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.753 HTMF[3376:147526] fontName:&amp;#39;Helvetica&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.753 HTMF[3376:147526] fontName:&amp;#39;Helvetica-LightOblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.754 HTMF[3376:147526] fontName:&amp;#39;Helvetica-Oblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.754 HTMF[3376:147526] fontName:&amp;#39;Helvetica-BoldOblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.754 HTMF[3376:147526] fontName:&amp;#39;Helvetica-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.754 HTMF[3376:147526] familyName:&amp;#39;Courier&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.754 HTMF[3376:147526] fontName:&amp;#39;Courier-BoldOblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.754 HTMF[3376:147526] fontName:&amp;#39;Courier&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.754 HTMF[3376:147526] fontName:&amp;#39;Courier-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.754 HTMF[3376:147526] fontName:&amp;#39;Courier-Oblique&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.755 HTMF[3376:147526] familyName:&amp;#39;Cochin&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.755 HTMF[3376:147526] fontName:&amp;#39;Cochin-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.755 HTMF[3376:147526] fontName:&amp;#39;Cochin&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.755 HTMF[3376:147526] fontName:&amp;#39;Cochin-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.755 HTMF[3376:147526] fontName:&amp;#39;Cochin-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.755 HTMF[3376:147526] familyName:&amp;#39;Hiragino Mincho ProN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.755 HTMF[3376:147526] fontName:&amp;#39;HiraMinProN-W6&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.755 HTMF[3376:147526] fontName:&amp;#39;HiraMinProN-W3&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.756 HTMF[3376:147526] familyName:&amp;#39;Devanagari Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.756 HTMF[3376:147526] fontName:&amp;#39;DevanagariSangamMN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.756 HTMF[3376:147526] fontName:&amp;#39;DevanagariSangamMN-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.756 HTMF[3376:147526] familyName:&amp;#39;Oriya Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.756 HTMF[3376:147526] fontName:&amp;#39;OriyaSangamMN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.756 HTMF[3376:147526] fontName:&amp;#39;OriyaSangamMN-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.756 HTMF[3376:147526] familyName:&amp;#39;Snell Roundhand&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.756 HTMF[3376:147526] fontName:&amp;#39;SnellRoundhand-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.757 HTMF[3376:147526] fontName:&amp;#39;SnellRoundhand&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.757 HTMF[3376:147526] fontName:&amp;#39;SnellRoundhand-Black&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.757 HTMF[3376:147526] familyName:&amp;#39;Zapf Dingbats&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.757 HTMF[3376:147526] fontName:&amp;#39;ZapfDingbatsITC&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.757 HTMF[3376:147526] familyName:&amp;#39;Bodoni 72&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.757 HTMF[3376:147526] fontName:&amp;#39;BodoniSvtyTwoITCTT-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.757 HTMF[3376:147526] fontName:&amp;#39;BodoniSvtyTwoITCTT-Book&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.757 HTMF[3376:147526] fontName:&amp;#39;BodoniSvtyTwoITCTT-BookIta&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.758 HTMF[3376:147526] familyName:&amp;#39;Verdana&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.758 HTMF[3376:147526] fontName:&amp;#39;Verdana-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.758 HTMF[3376:147526] fontName:&amp;#39;Verdana-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.758 HTMF[3376:147526] fontName:&amp;#39;Verdana&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.758 HTMF[3376:147526] fontName:&amp;#39;Verdana-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.758 HTMF[3376:147526] familyName:&amp;#39;American Typewriter&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.758 HTMF[3376:147526] fontName:&amp;#39;AmericanTypewriter-CondensedLight&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.758 HTMF[3376:147526] fontName:&amp;#39;AmericanTypewriter&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.758 HTMF[3376:147526] fontName:&amp;#39;AmericanTypewriter-CondensedBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.759 HTMF[3376:147526] fontName:&amp;#39;AmericanTypewriter-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.759 HTMF[3376:147526] fontName:&amp;#39;AmericanTypewriter-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.759 HTMF[3376:147526] fontName:&amp;#39;AmericanTypewriter-Condensed&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.759 HTMF[3376:147526] familyName:&amp;#39;Avenir Next&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.759 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-UltraLight&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.759 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-UltraLightItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.759 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.759 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.759 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-DemiBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.760 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-DemiBoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.760 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-Medium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.760 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-HeavyItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.760 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-Heavy&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.760 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.760 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.760 HTMF[3376:147526] fontName:&amp;#39;AvenirNext-MediumItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.760 HTMF[3376:147526] familyName:&amp;#39;Baskerville&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.761 HTMF[3376:147526] fontName:&amp;#39;Baskerville-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.761 HTMF[3376:147526] fontName:&amp;#39;Baskerville-SemiBold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.761 HTMF[3376:147526] fontName:&amp;#39;Baskerville-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.761 HTMF[3376:147526] fontName:&amp;#39;Baskerville-SemiBoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.761 HTMF[3376:147526] fontName:&amp;#39;Baskerville-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.761 HTMF[3376:147526] fontName:&amp;#39;Baskerville&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.761 HTMF[3376:147526] familyName:&amp;#39;Khmer Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.761 HTMF[3376:147526] fontName:&amp;#39;KhmerSangamMN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.761 HTMF[3376:147526] familyName:&amp;#39;Didot&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.762 HTMF[3376:147526] fontName:&amp;#39;Didot-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.762 HTMF[3376:147526] fontName:&amp;#39;Didot-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.762 HTMF[3376:147526] fontName:&amp;#39;Didot&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.762 HTMF[3376:147526] familyName:&amp;#39;Savoye LET&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.762 HTMF[3376:147526] fontName:&amp;#39;SavoyeLetPlain&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.762 HTMF[3376:147526] familyName:&amp;#39;Bodoni Ornaments&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.762 HTMF[3376:147526] fontName:&amp;#39;BodoniOrnamentsITCTT&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.763 HTMF[3376:147526] familyName:&amp;#39;Symbol&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.763 HTMF[3376:147526] fontName:&amp;#39;Symbol&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.763 HTMF[3376:147526] familyName:&amp;#39;Menlo&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.763 HTMF[3376:147526] fontName:&amp;#39;Menlo-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.763 HTMF[3376:147526] fontName:&amp;#39;Menlo-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.763 HTMF[3376:147526] fontName:&amp;#39;Menlo-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.763 HTMF[3376:147526] fontName:&amp;#39;Menlo-BoldItalic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.763 HTMF[3376:147526] familyName:&amp;#39;Bodoni 72 Smallcaps&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.764 HTMF[3376:147526] fontName:&amp;#39;BodoniSvtyTwoSCITCTT-Book&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.764 HTMF[3376:147526] familyName:&amp;#39;Papyrus&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.764 HTMF[3376:147526] fontName:&amp;#39;Papyrus&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.764 HTMF[3376:147526] fontName:&amp;#39;Papyrus-Condensed&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.764 HTMF[3376:147526] familyName:&amp;#39;Hiragino Sans&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.764 HTMF[3376:147526] fontName:&amp;#39;HiraginoSans-W3&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.764 HTMF[3376:147526] fontName:&amp;#39;HiraginoSans-W6&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.764 HTMF[3376:147526] familyName:&amp;#39;PingFang SC&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.765 HTMF[3376:147526] fontName:&amp;#39;PingFangSC-Ultralight&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.765 HTMF[3376:147526] fontName:&amp;#39;PingFangSC-Regular&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.765 HTMF[3376:147526] fontName:&amp;#39;PingFangSC-Semibold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.765 HTMF[3376:147526] fontName:&amp;#39;PingFangSC-Thin&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.765 HTMF[3376:147526] fontName:&amp;#39;PingFangSC-Light&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.765 HTMF[3376:147526] fontName:&amp;#39;PingFangSC-Medium&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.765 HTMF[3376:147526] familyName:&amp;#39;Euphemia UCAS&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.765 HTMF[3376:147526] fontName:&amp;#39;EuphemiaUCAS-Italic&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.766 HTMF[3376:147526] fontName:&amp;#39;EuphemiaUCAS&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.766 HTMF[3376:147526] fontName:&amp;#39;EuphemiaUCAS-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.766 HTMF[3376:147526] familyName:&amp;#39;Telugu Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.766 HTMF[3376:147526] familyName:&amp;#39;Bangla Sangam MN&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.766 HTMF[3376:147526] familyName:&amp;#39;Zapfino&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.766 HTMF[3376:147526] fontName:&amp;#39;Zapfino&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.766 HTMF[3376:147526] familyName:&amp;#39;Bodoni 72 Oldstyle&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.766 HTMF[3376:147526] fontName:&amp;#39;BodoniSvtyTwoOSITCTT-Book&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.767 HTMF[3376:147526] fontName:&amp;#39;BodoniSvtyTwoOSITCTT-Bold&amp;#39;&lt;br&gt;
2016-03-22 12:54:06.767 HTMF[3376:147526] fontName:&amp;#39;BodoniSvtyTwoOSITCTT-BookIt&amp;#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</content><category term="iOS" /><summary>UIFont FamilyNames FontNames</summary></entry><entry><title>VIM Using Notes</title><link href="http://127.0.0.1:4000/blog/Vim-Using-Notes/" rel="alternate" type="text/html" title="VIM Using Notes" /><published>2016-02-02T03:00:00+08:00</published><updated>2016-02-02T03:00:00+08:00</updated><id>http://127.0.0.1:4000/blog/Vim-Using-Notes</id><content type="html" xml:base="http://127.0.0.1:4000/blog/Vim-Using-Notes/">&lt;h1&gt;VIM Using Notes&lt;/h1&gt;

&lt;h2&gt;First Level&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; // 按i进入Insert模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ESC&lt;/code&gt;   // 按ESC返回Normal模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; // 删除当前光标所在的一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt;   // 保存并退出(:w 保存, :q 退出)(w后面可以跟文件名)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd&lt;/code&gt;    // 删除当前行(并把删除的行保存到剪贴板)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; // 粘贴剪贴板&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hjkl&lt;/code&gt;  // 移动光标，分别为『左』『下』『上』『右』(光标键&lt;code&gt;← ↓ ↑ →&lt;/code&gt;也可以)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help &amp;lt;command&amp;gt;&lt;/code&gt;   // 显示相关命令的帮助(退出帮助需要&lt;code&gt;:q&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Second Level&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;以下命令需要在Normal模式下使用&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;各种插入模式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; // 在光标后插入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; // 在当前行后插入一个新行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cw&lt;/code&gt;    // 替换从光标所在位置后到一个单词结尾的字符&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;简单的移动光标&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; // 移动至行首（数字零）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; // 移动至行尾&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;撤销/取消撤销&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; // 撤销，undo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-r&lt;/code&gt;    // 取消撤销，redo&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;打开/保存/退出/改变文件(Buffer)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:e &amp;lt;path/to/file&amp;gt;&lt;/code&gt; // 打开一个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:w&lt;/code&gt;    // 存盘&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:saveas &amp;lt;path/to/file&amp;gt;&lt;/code&gt;    // 另存为为&lt;path/to/file&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt;   // 保存并退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:x&lt;/code&gt;    // 保存并退出，仅在需要时保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZZ&lt;/code&gt;    // 保存并退出，不需要输入冒号并回车&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q!&lt;/code&gt;   // 退出不保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:qa!&lt;/code&gt;  // 强行退出所有正在编辑的文件（即使有过更改）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bn&lt;/code&gt;   // 切换下一个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bp&lt;/code&gt;   // 切换上一个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:n&lt;/code&gt;    // 切换下一个文件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Third Level&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;命令快速重复&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; // (小数点)可以重复上一次命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&amp;lt;command&amp;gt;&lt;/code&gt;    // 重复某个命令N次&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;光标快速移动&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NG&lt;/code&gt;    // 快速移动光标至N行（或者使用&lt;code&gt;:N&lt;/code&gt;命令也可以快速移动光标值N行）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gg&lt;/code&gt;    // 快速移动光标至第一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt; // 快速移动光标值最后一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; // 到下一个单词的开头（若是大写，则认为以blank字符分割单词）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt; // 到下一个单词的结尾（若是大写，则认为以blank字符分割单词）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%:&lt;/code&gt;    // 匹配括号移动，包括(, [, {, (需要先把光标移动至括号上)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; // 匹配光标当前所在的单词，移动光标至下一个匹配单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; // 匹配光标当前所在的单词，移动光标至上一个匹配单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; // 到本行的第一个非blank字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g_&lt;/code&gt;    // 到本行最后一个不是blanl字符的位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fa&lt;/code&gt;    // 到下一个为&lt;code&gt;a&lt;/code&gt;的字符处（&lt;code&gt;a&lt;/code&gt;也可以为其他字符）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3fa&lt;/code&gt;   // 在当前行查找第三个出现的&lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t,&lt;/code&gt;    // 到&lt;code&gt;,&lt;/code&gt;前的第一个字符（&lt;code&gt;,&lt;/code&gt;
也可以为其他字符）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt;/&lt;code&gt;T&lt;/code&gt;   // 与&lt;code&gt;f&lt;/code&gt;&lt;code&gt;t&lt;/code&gt;一样，只不过是相反方向&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Faster&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;start position&amp;gt;&amp;lt;command&amp;gt;&amp;lt;end position&amp;gt;&lt;/code&gt;&lt;/strong&gt;   // 很多命令可以和移动光标命令联动，比如&lt;code&gt;0y$&lt;/code&gt;意味着&lt;code&gt;0&lt;/code&gt;先到行首、&lt;code&gt;y&lt;/code&gt;从这里进行拷贝、&lt;code&gt;$&lt;/code&gt;拷贝到本行最后一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; // 可视化选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gU&lt;/code&gt;    // 将选择部分变为大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gu&lt;/code&gt;    // 将选择部分变为小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; // 删除选择部分&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dt&amp;quot;&lt;/code&gt;   // 删除所有内容，直到遇到&lt;code&gt;&amp;quot;&lt;/code&gt;,&lt;code&gt;&amp;quot;&lt;/code&gt;可以为任意字符&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Skills" /><category term="VIM" /><summary>VIM Using Notes</summary></entry><entry><title>Swift Learning Notes</title><link href="http://127.0.0.1:4000/blog/Swift-Learning-Notes/" rel="alternate" type="text/html" title="Swift Learning Notes" /><published>2016-01-28T03:00:00+08:00</published><updated>2016-01-28T03:00:00+08:00</updated><id>http://127.0.0.1:4000/blog/Swift-Learning-Notes</id><content type="html" xml:base="http://127.0.0.1:4000/blog/Swift-Learning-Notes/">&lt;h1&gt;Swift Learning Notes&lt;/h1&gt;

&lt;h2&gt;Option&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;An Optional is just an enum&lt;/strong&gt;&lt;br&gt;
Conceptually it is like this (the &lt;T&gt; is a generic like as in Array&lt;T&gt;)...&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;enum Optional&amp;lt;T&amp;gt; {
    case None
    case Some(T)
}
let x:String? = nil
... is ...
let x = Optional&amp;lt;String&amp;gt;.None

let x:String? = &amp;quot;Hello&amp;quot;
... is ...
let x = Optional&amp;lt;String&amp;gt;.Some(&amp;quot;Hello&amp;quot;)

var y = x!
... is ...
switch x{
    case Some(let value): y = value
    case None:  // raise an exception
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Array&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var a = Array&amp;lt;String&amp;gt;()
... is the same as ...
var a = [String]()

let animals = [&amp;quot;Giraffe&amp;quot;, &amp;quot;Cow&amp;quot;, &amp;quot;Doggie&amp;quot;, &amp;quot;Bird&amp;quot;]
animals.append(&amp;quot;Ostrich&amp;quot;)   // won&amp;#39;t compile, animals is immutable (because of let)
let animal = animals[5] // crash (array index out of bounds)

// enumerating an Array
for animal in animals{
    print(&amp;quot;\(animal)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Dictionary&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var pac10teamRankings = Dictionary&amp;lt;String, Int&amp;gt;
... is the same as ...
var pac10teamRankings = [String:Int]()

pac10teamRankings = [&amp;quot;Stanford&amp;quot;:1, &amp;quot;Cal&amp;quot;:10]
let ranking = pac10teamRankings[&amp;quot;Ohio State&amp;quot;]   // ranking is an Int? (would be nil)

// use a tuple with for-in to enumerate a Dictionary
for (key, value) in pac10teamRankings{
    print(&amp;quot;\(key) = \(value)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Range&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A Range in Swift is just two end points of a sensible type&lt;/strong&gt;&lt;br&gt;
Range is generic (e.g. Range&lt;T&gt;)&lt;br&gt;
This is sort of a pseudo-representation of Range:&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;struct Range&amp;lt;T&amp;gt;{
    var startIndex:T
    var endIndex:T
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An Array&amp;#39;s range would be a Range&lt;Int&gt; (since Arrays are indexed by Int)&lt;br&gt;&lt;br&gt;
Warning: A String subrange is not Range&lt;Int&gt; (it is Range&lt;String.Index&gt;)  &lt;/p&gt;

&lt;p&gt;There is special syntax for specifying a Range: either ...(inclusive) or ..&amp;lt; (open-ended)  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;let array = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;]
let subArray1 = array[2...3]    // subArray1 will be [&amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;]
let subArray2 = array[2..&amp;lt;3]    // subArray2 will be [&amp;quot;c&amp;quot;]
for i in [27...104]{ }  // Range is enumeratable, like Array, String, Dictionary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;NSObject&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Base class for all Objective-C classes&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Some advanced features will require you to subclass from NSObject (and it can&amp;#39;t hurt to do so)&lt;br&gt;
&lt;strong&gt;&lt;em&gt;The best practice here is to always have your Swift classes inherit from NSObject.&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;NSNumber&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generic number-holding class&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;let n = NSNumber(35.5)
let intversion = n.intValue // also doubleValue, boolValue, etc.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;NSDate&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Used to find out the date and time right now or to store past or future dates.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;See alse NSCalendar, NSDateFormatter, NSDateComponents&lt;br&gt;&lt;/li&gt;
&lt;li&gt;If you are displaying a date in your UI, there are localization ramifications, so check these out!&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;NSData&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A &amp;quot;bag of bits&amp;quot;.  Used to save/restore/transmit raw data throughout the iOS SDK&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Data Structures in Swift&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classes, Structures and Enumerations&lt;/strong&gt;&lt;br&gt;
These are the 3 fundamental building blocks of data structures in Swift&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Similarities&lt;/strong&gt;&lt;br&gt;
1.Declaration syntax ...&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class CalculatorBrain{
    // class
}

struct Vertex{
    // struct
}

enum Op{
    // enum
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.Properties and Functions ...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;func doit(argument:Type) -&amp;gt; ReturnValue{

}

var storedProperty = &amp;lt;initial value&amp;gt; (not enum)

var computedProperty:Type{
    get {}
    set {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.Initializers (again, not enum) ...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;init(argument1:Type, argument2:Type, ...){

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Differences&lt;/strong&gt;&lt;br&gt;
1.Inheritance (class only)  // 继承&lt;br&gt;
2.Introspection and casting (class only)    // 内省 和 转型&lt;br&gt;
3.Value type (struct, enum) vs. Reference type (class)  // 值类型(拷贝变量) 与 引用类型（传递指针）&lt;br&gt;
&lt;strong&gt;&lt;em&gt;堆内存中的对象，系统会自动为我们管理内存（ARC）&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Value vs. Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Value (struct and enum)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. Copied when passed as an argument to a function
2. Copied when assigned to a different variable
3. Immutable if assigned to a variable with let
4. Remember that function parameters are, by default, constants
5. You can put the keyword `var` on an parameter, and it will be mutable, but it&amp;#39;s still a copy
6. You must note any func that can mutate a struct/enum with the keyword `mutating`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reference (class)&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stored in the heap and reference counted (automatically)&lt;/li&gt;
&lt;li&gt;Constant pointers to a class(let) still can mutate by calling methods and changing properties&lt;/li&gt;
&lt;li&gt;When passed as an argument, does not make a copy (just passing a pointer to same instance)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choosing which to use&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Usually you will choose class over struct. struct tends to be more for fundamental types.&lt;/li&gt;
&lt;li&gt;Use of enum is situational (any time you have a type of data with discrete values)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Method&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Obviously you can override methods/properties in your superclass&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. Precede your func or var with the keywork `override`
2. A method can be marked `final` which will prevent subclasses from being able to override
3. Classes can alse be marked final
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Both types and instances can have methods/properties&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. For this example, lets consider the struct Double (yes, Double is a struct)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var d:Double = ...
if d.isSignMinus{
    d = Double.abs(d)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;isSignMiuns&lt;/code&gt; is an instance property of a Double (you send it to a particular Double)&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;&lt;code&gt;abs&lt;/code&gt; is a type method of Double (you send it to the type itself, not to a particular Double)&lt;/em&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Declare a type method or a property by using &lt;code&gt;static&lt;/code&gt; in front of it：&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;static func ads(d:Double) -&amp;gt; Double
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;In a class you use the word &lt;code&gt;class&lt;/code&gt; not &lt;code&gt;static&lt;/code&gt;, called a class function&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Parameters Names&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;All parameters to all functions have an &lt;code&gt;internal name&lt;/code&gt; and &lt;code&gt;an external name&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The &lt;code&gt;internal name&lt;/code&gt; is the name of the local variable you use inside the method&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The &lt;code&gt;external name&lt;/code&gt; is what callers will use to call the method&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Both with external name and internal name
func foo(external internal: Int){
    let local = internal
}

func bar(){
    let result = foo(external:123)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;You can put &lt;code&gt;_&lt;/code&gt; if you don&amp;#39;t want callers to use an external name at all for a given parameter  // That is the default for the first argument to a function&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// With under bar thing for enternal name
func foo(_ internal: Int){
    let local = internal
}

func bar(){
    let result = foo(123)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Under bar thing is the default for the first argument
func foo(internal: Int){
    let local = internal
}

func bar(){
    let result = foo(123)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;You can force the first parameter&amp;#39;s external name to be the internal name with &lt;code&gt;#&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Force the first parameter&amp;#39;s external name to be the internal name with `#`
func foo(#internal: Int){
    let local = internal
}

func bar(){
    let result = foo(internal: 123)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;**For other (not the first) parameters, the internal name is, by default, the external name&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;func foo(first: Int, second: Double){
    let local = internal
}

func bar(){
    let result = foo(123, second: 5.5)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Any parameter&amp;#39;s external name can be changed&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;func foo(first: Int, externalSecond second: Double){
    let local = internal
}

func bar(){
    let result = foo(123, externalSecond: 5.5)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Or even omitted (though this would be sort of &amp;quot;anti-Swift&amp;quot;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;func foo(first: Int, _ second: Double){
    let local = internal
}

func bar(){
    let result = foo(123, 5.5)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Properties&lt;/h2&gt;

&lt;h3&gt;Property Observers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;You can observe changes to any property with &lt;code&gt;willSet&lt;/code&gt; and &lt;code&gt;didSet&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var someStoredProperty: Int = 42 {
    willSet {newValue is the new Value}
    didSet {oldValue is the old value}
}

override var inheritedProperty {
    willSet {newValue is the new value}
    didSet {oldValue is the old value}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;One very common thing to do in an observer in a Controller is to update the user-interface&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Lazy Initialization&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;A lazy property does not get initialized until someone accesses it**&lt;br&gt;&lt;/li&gt;
&lt;li&gt;You can allocate an object, execute a closure, or call a method if you want&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;lazy var brain = CalculatorBrain()  // nice if CalclatorBrain used lots of esources

lazy var someProperty: Type = {
    // construct the value of someProperty here
    return &amp;lt;the constructed value&amp;gt;
}()

lazy var myProperty = self.initializeMyProperty()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;This still satisfies the &amp;quot;you must initialize all of your properties&amp;quot; rule&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unfortunately, things initialized this way can&amp;#39;t be constants (i.e., &lt;code&gt;var&lt;/code&gt; ok, &lt;code&gt;let&lt;/code&gt; not okay)&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Only vars can be lazily initialized&lt;/em&gt;&lt;br&gt;
&lt;em&gt;If you had constants in your class, those would have to be initializing in your initializer&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This can be used to get around some initialization dependency conundrums&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Initialization&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When is an init method needed?&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;init methods are not so common because properties can have their defaults set using &lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Or properties might be Optionals, in which case they start out &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can also initialize a property by executing a closeure&lt;/li&gt;
&lt;li&gt; Or use lazy instantiation&lt;/li&gt;
&lt;li&gt;So you only need init when a value can&amp;#39;t be set in any of these ways&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You also get some &amp;quot;free&amp;quot; init methods&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If all properties in a base class (no superclass) have defaults, you get &lt;code&gt;init()&lt;/code&gt; for free&lt;/li&gt;
&lt;li&gt;If a &lt;code&gt;struct&lt;/code&gt; has no initializers, it will get a default one with all properties as arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;struct MyStruct {
    var x: Int = 42
    var y: String = &amp;quot;moltuae&amp;quot;

    init(x: Int, y: String) // comes for free
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What can you do inside an init?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can set any prperty&amp;#39;s value, even those with default values&lt;/li&gt;
&lt;li&gt;Constant prperties (i.e. properties declared with &lt;code&gt;let&lt;/code&gt;)can be set&lt;/li&gt;
&lt;li&gt;You can call other init methods in your own class using &lt;code&gt;self.init(&amp;lt;args&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In a class, you can of course also call &lt;code&gt;super.init(&amp;lt;args&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;But there are some rules for calling inits from inits in a &lt;code&gt;class&lt;/code&gt; ...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What are you required to do inside init?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By the time any init is done, all properties must have values (optionals can have the value nil)&lt;/li&gt;
&lt;li&gt;There are two types of inits in a &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;convenience&lt;/code&gt; and &lt;code&gt;designated&lt;/code&gt; (i.e. not convenience)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Rules for designated init&lt;/em&gt;&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;A designated init must (and can only) call a designated init that is in its immediate superclass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;You must initialize all properties introduced by your class before calling a superclass&amp;#39;s init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;You must call a superclass&amp;#39;s init before you assign a value to an inherited property&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Rules for convenience init&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;A convenience init must (and can only) call a designated init in its own class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A convenience init may call a designated init indirectly (through another convenience init)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A convenience init must call a designated init before it can set any property values&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;The calling of other inits must be complete before you can access properties or invoke methods&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&amp;quot;What&amp;#39;s the differences between &lt;code&gt;designated init&lt;/code&gt; and &lt;code&gt;convenience init&lt;/code&gt;&amp;quot;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Maybe Answer is:&lt;/strong&gt;&amp;quot;You do not have to provide convenience initializers if your class does not require them. Create convenience initializers whenever a shortcut to a common initialization pattern will save time or make initialization of the class clearer in intent.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Inheriting init&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you do not implement any designated inits, you&amp;#39;ll inherit all of your superclass&amp;#39;s designateds&lt;/li&gt;
&lt;li&gt;If you override all of your superclass&amp;#39;s designated inits, you&amp;#39;ll inherit all it&amp;#39;s convenience inits&lt;/li&gt;
&lt;li&gt;If you implement no inits, you&amp;#39;ll inherit all of your superclass&amp;#39;s inits&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Required init&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A class can mark one or more of its init methods as &lt;code&gt;required&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Any subclass must implement said init methods (though they can be inherited per above rules)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Failable init&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If an init is declared with a ? (or !)after the word init, it returns an &lt;code&gt;Optional&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;init?(arg1:Type1, ...){
    // might return nil in here
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;These are rare.&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Note: The documentation does not seem to properly show these inits!&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;But you&amp;#39;ll be able to tell because the compiler will warn you about the type when you access it&lt;/em&gt;  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;let image = UIImage(named:&amp;quot;foo&amp;quot;)    // image is an Optional UIImage (i.e. UIImage?)
// Usually we would use if-let for these cases ...
if let image = UIImage(named:&amp;quot;foo&amp;quot;){
    // image was successfully created
}else{
    // couldn&amp;#39;t create the image
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create Objects&lt;/strong&gt;&lt;br&gt;
Usually you create an object by calling it&amp;#39;s initializer via the type name ...  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;let x = CalculatorBrain()
let y = ComplicatedObject(arg1: 42, arg2: &amp;quot;hello&amp;quot;, ...)
let z = [String]()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But sometimes you create objects by calling type methods in classes ...&lt;br&gt;&lt;br&gt;
&lt;code&gt;let button = UIButton.buttonWithType(UIButtonType.System)&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Or obviously sometimes other objects will create objects for you ...&lt;br&gt;&lt;br&gt;
&lt;code&gt;let commaSeparatedArrayElements: String = &amp;quot;,&amp;quot;.join(myArray)&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;AnyObject&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Special &amp;quot;Type&amp;quot; (actually it&amp;#39;s a Protocol)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Used primarily for compatibility with existing Objective-C-based APIs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Where will you see it?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;As properties (either singularly or as an array of them), e.g. ...
&lt;code&gt;var destinationViewController: AnyObject&lt;/code&gt;&lt;br&gt;
&lt;code&gt;var toolbarItems: [AnyObject]&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;2. or as arguments to functions ...  
`func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject)`  
`func addConstraints(constraints: [AnyObject])`  
`func appendDigit(sender: AnyObject)`  

3. or even as return types from functions ...  
`class func buttonWithType(buttonType: UIButtonType) -&amp;gt; AnyObject`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do we use AnyObject?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we don&amp;#39;t usually use it directly&lt;/li&gt;
&lt;li&gt;Instead, we convert it to anouter, known type&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do we convert it?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to create a new variable which is of a known object type (i.e. not AnyObject)&lt;/li&gt;
&lt;li&gt;Then we assign this new variable to hold the thing that is AnyObject&lt;/li&gt;
&lt;li&gt;Of course, that new variable has to be of a compatible type&lt;/li&gt;
&lt;li&gt;If we try to force the AnyObject into something incompatible, crash!&lt;/li&gt;
&lt;li&gt;But there are ways to check compatibilit y (either before forcing or while forcing)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Casting AnyObject&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We &amp;quot;force&amp;quot; an AnyObject to be something else by &amp;quot;casting&amp;quot; it using the &lt;code&gt;as&lt;/code&gt; keyword ...  &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s use &lt;code&gt;var destinationViewController: AnyObject&lt;/code&gt; as an example ...&lt;br&gt;&lt;br&gt;
&lt;code&gt;let calcVC = destinationViewController as CalculatorViewController&lt;/code&gt;&lt;br&gt;&lt;br&gt;
... this would crash if &amp;quot;dvc&amp;quot;&amp;quot; was not, in fact, a CalculatorViewController (or subclass thereof)  &lt;/p&gt;

&lt;p&gt;To protect against a crash, we can use &lt;code&gt;if let&lt;/code&gt; with &lt;code&gt;as?&lt;/code&gt; ...&lt;br&gt;&lt;br&gt;
&lt;code&gt;if let calcVC = destinationViewController as? CalculatorViewController { ... }&lt;/code&gt;&lt;br&gt;&lt;br&gt;
... &lt;code&gt;as?&lt;/code&gt; returns an &lt;code&gt;Optional&lt;/code&gt; (calcVC = nil if dvc was not a CalculatorViewController)  &lt;/p&gt;

&lt;p&gt;Or we can check before we even try to do as with the &lt;code&gt;is&lt;/code&gt; keyword&lt;br&gt;
&lt;code&gt;if destinationViewController is CalculatorViewController { ... }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Casting Arrays of AnyObject&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re dealing with an [AnyObject], you can cast the elements or the entire array ...  &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s use &lt;code&gt;var toolbarItems: [AnyObjects]&lt;/code&gt; as an example &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="iOS" /><category term="Swift" /><summary>Swift Learning Notes</summary></entry><entry><title>webRTC Dev Notes</title><link href="http://127.0.0.1:4000/blog/webRTC-Dev-Notes/" rel="alternate" type="text/html" title="webRTC Dev Notes" /><published>2016-01-19T03:00:00+08:00</published><updated>2016-01-19T03:00:00+08:00</updated><id>http://127.0.0.1:4000/blog/webRTC-Dev-Notes</id><content type="html" xml:base="http://127.0.0.1:4000/blog/webRTC-Dev-Notes/">&lt;h1&gt;webRTC Dev Notes&lt;/h1&gt;

&lt;h3&gt;Development Environment&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;An OS X machine is required for iOS development. While it’s possible to develop purely from the command line with text editors, it’s easiest to use Xcode. Both methods will be illustrated here.&lt;/p&gt;

&lt;h3&gt;Getting the Code&lt;/h3&gt;

&lt;hr&gt;

&lt;h4&gt;Install prerequisite software/depot_tools&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Fetch depot_tools:&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add depot_tools to your PATH:&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ export PATH=&lt;/code&gt;pwd&lt;code&gt;/depot_tools:&amp;quot;$PATH&amp;quot;&lt;/code&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yes, you want to put depot_tools ahead of everything else, otherwise gcl will refer to the GNU Common Lisp compiler.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;You may want to add this to your .bashrc file or your shell&amp;#39;s equivalent so that you don’t need to reset your $PATH manually each time you open a new shell.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Xcode 3.0 or higher&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Set the target OS in your environment:&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;export GYP_DEFINES=&amp;quot;OS=ios&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Create a working directory, enter it, and run&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;fetch --nohooks webrtc_ios&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;gclient sync&lt;/code&gt;&lt;br&gt;&lt;br&gt;
This will fetch a regular WebRTC checkout with the iOS-specific parts added. The same checkout can be used for both Mac and iOS development, depending on the OS you set in GYP_DEFINES (see above).&lt;/p&gt;

&lt;h3&gt;Compiling the Code&lt;/h3&gt;

&lt;hr&gt;</content><category term="webRTC" /><summary>webRTC Dev Notes</summary></entry><entry><title>Mac OS Orders</title><link href="http://127.0.0.1:4000/blog/MacOS-Commands/" rel="alternate" type="text/html" title="Mac OS Orders" /><published>2015-12-24T03:00:00+08:00</published><updated>2015-12-24T03:00:00+08:00</updated><id>http://127.0.0.1:4000/blog/MacOS-Commands</id><content type="html" xml:base="http://127.0.0.1:4000/blog/MacOS-Commands/">&lt;h1&gt;Mac OS Orders&lt;/h1&gt;

&lt;h2&gt;Display hidden files&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Display hidden files&lt;br&gt;
&lt;code&gt;defaults write com.apple.finder AppleShowAllFiles -bool true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t display hideen files&lt;br&gt;
&lt;code&gt;defaults write com.apple.finder AppleShowAllFiles -bool false&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Disable and enable Rootless feature&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;csrutil disable&lt;/code&gt;  // Disable rootless&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csrutil enable&lt;/code&gt;   // Enable rootless&lt;/li&gt;
&lt;/ol&gt;</content><category term="Mac OS" /><summary>Mac OS Orders

Display hidden files


Display hidden files
defaults write com.apple.finder AppleShowAllFiles -bool true
Don&amp;#39;t display hideen files
defaults write com.apple.finder AppleShowAllFiles -bool false</summary></entry><entry><title>Git Using Notes</title><link href="http://127.0.0.1:4000/blog/Git-Using-Notes/" rel="alternate" type="text/html" title="Git Using Notes" /><published>2015-12-17T03:00:00+08:00</published><updated>2015-12-17T03:00:00+08:00</updated><id>http://127.0.0.1:4000/blog/Git-Using-Notes</id><content type="html" xml:base="http://127.0.0.1:4000/blog/Git-Using-Notes/">&lt;h1&gt;Git Using Notes&lt;/h1&gt;

&lt;h2&gt;1. Local Repo&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建Git仓库&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ mkdir gitDirectory&lt;/code&gt;    // 创建目录&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ cd gitDirectory&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ pwd&lt;/code&gt;   // 查看当前所在目录&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git init&lt;/code&gt;  // 初始化仓库&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ ls -ah&lt;/code&gt;    // 查看当前目录所含文件&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加文件到版本库&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git add fileName&lt;/code&gt;  // 提交文件至Git暂存区&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git commit -m &amp;#39;wrote a file&amp;#39;&lt;/code&gt;  // 提交暂存区文件至Git版本库，&lt;code&gt;-m&lt;/code&gt;后输入的是本次提交的的说明&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git rm --cached fileName&lt;/code&gt;  //  取消对某文件的追踪&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看命令&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git status&lt;/code&gt;    // 查看Git仓库当前状态&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git diff fileName&lt;/code&gt; // 查看文件修改内容&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git log&lt;/code&gt;   // 查看提交日志&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git log --pretty=oneline&lt;/code&gt;  // 显示简要日志信息&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git reflog&lt;/code&gt; // 查看历史日志  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;版本回退&lt;br&gt;
&lt;code&gt;$ git reset --hard commitId&lt;/code&gt; // reset回退命令，可以回退到任一提交版本&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git reset --hard HEAD^&lt;/code&gt;    // HEAD表示当前版本，HEAD^标识上一个版本，HEAD^^表示上上个版本，HEAD~100表示往前100个版本  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;撤销修改&lt;br&gt;
&lt;code&gt;$ git checkout -- fileName&lt;/code&gt;  // 撤销对某文件的修改，恢复至最近一次add或commit的状态&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git reset HEAD fileName&lt;/code&gt;   // reset命令除了可以回退版本，还可以用于撤销暂存区的修改，重新放回工作区。HEAD表示最新版本  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除文件&lt;br&gt;
&lt;code&gt;$ rm fileName&lt;/code&gt;   // 从系统文件管理器删除文件&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git rm fileName&lt;/code&gt;   // 从Git版本库中删除文件  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;2. Branch&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建分支&lt;br&gt;
&lt;code&gt;$ git branch branchName&lt;/code&gt; // 创建分支branchName  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切换分支&lt;br&gt;
&lt;code&gt;$ git checkout branchName&lt;/code&gt;   // 切换至分支branchName  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看分支&lt;br&gt;
&lt;code&gt;$ git branch&lt;/code&gt;    // 会列出所有分支，带*号的为当前分支  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并分支&lt;br&gt;
&lt;code&gt;$ git merge branchName&lt;/code&gt;   // 合并指定分支到当前分支  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除分支&lt;br&gt;
&lt;code&gt;$ git brance -d branchName&lt;/code&gt;  // 删除指定分支&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git branch -D branchName&lt;/code&gt;  // 强行删除指定分支&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ $ git push origin --delete branchName&lt;/code&gt; // 删除远程仓库指定分支&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;注意：步骤1. 2. 可由一句命令完成：&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git checkout -b branchName&lt;/code&gt;    // 创建分支branchName，并切换至该分支&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;2.1 Deal with conflicts&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;解决冲突后，再次使用&lt;code&gt;add&lt;/code&gt;、&lt;code&gt;commit&lt;/code&gt;进行提交操作。  &lt;/p&gt;

&lt;p&gt;*** 注：使用如下命令可以查看分支合并情况：&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并分支时禁用&lt;code&gt;Fast forward&lt;/code&gt;模式：&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git merge --no-ff -m &amp;quot;merge with no-ff&amp;quot; branchName&lt;/code&gt;    // 禁用&lt;code&gt;Fast forward&lt;/code&gt;模式合并分支时，必定会创建一个新的commit，所以加上&lt;code&gt;-m&lt;/code&gt;参数，写入commit描述  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;注：分支策略：master分支仅用于发布版本，平时在dev分支上进行开发。团队开发时，每个人都往dev分支上合并代码，发布版本时才将dev分支往master分支上合并&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;2.2 Bug branch&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;储藏现场&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git stash&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看现场&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git stash list&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;恢复现场&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git stash apply stash@{0}&lt;/code&gt; // 恢复指定stash，恢复后，stash内容并不删除  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除现场&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git stash drop&lt;/code&gt;    // 删除stash内容  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;注：步骤3. 4. 可由一句命令完成：&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git stash pop&lt;/code&gt;  //恢复现场，同时删除现场&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;3. Remote Repo&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建SSH Key&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ ssh-keygen -t rsa -c &amp;#39;example@email.com&amp;#39;&lt;/code&gt;  // 如果用户主目录下已有.ssh目录，并且.ssh目录下已包含id_rsa和id_rsa.pub两个文件，则跳过创建此步骤  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;登录GitHub，&amp;#39;Account settings&amp;#39; -&amp;gt; &amp;#39;SSH Keys&amp;#39; -&amp;gt; &amp;#39;Add SSH Key&amp;#39;,复制id_rsa.pub文件内容添加新的SSH Key  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在GitHub创建一个Git仓库  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关联远程GitHub仓库&lt;br&gt;
&lt;code&gt;$ git remote add origin git@serverName:path/repoName.git&lt;/code&gt;    // 关联远程库&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git push -u origin master&lt;/code&gt;     // 首次推送master分支所有内容  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看远程仓库信息&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git remote&lt;/code&gt;    // 查看远程仓库信息&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git remote -v&lt;/code&gt; // 查看远程仓库详细信息&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;注：从远程服务器Clone仓库至本地，命令如下：&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;git clone git@serverName:path/repoName.git&lt;/code&gt;  // 默认只clone Master分支  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;推送本地分支&lt;br&gt;
&lt;code&gt;$ git push origin branchName&lt;/code&gt;    &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抓取分支&lt;br&gt;
&lt;code&gt;$ git checkout -b branchName origin/branchName&lt;/code&gt;  // 从远程仓库拉取branchName分支  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定本地分支和远程分支的链接&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git branch --set-upstream branchName origin/branchName&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抓去分支最新内容&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git pull&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;4. Tags&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;添加标签&lt;br&gt;
&lt;code&gt;$ git tag tagName&lt;/code&gt;   // 给当前commit添加标签&lt;br&gt;
&lt;code&gt;$ git tag tagName commitId&lt;/code&gt;  // 给指定commit添加标签&lt;br&gt;
&lt;code&gt;$ git tag -a tagName -m &amp;quot;remark&amp;quot; commitId&lt;/code&gt;   // &lt;code&gt;-a&lt;/code&gt;指定标签名字，&lt;code&gt;-m&lt;/code&gt;指定说明文字&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看标签&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git tag&lt;/code&gt;   // 查看所有标签&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git show tagName&lt;/code&gt;  // 查看指定标签详细信息  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除标签&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git tag -d tagName&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git push origin :refs/tags/tagName&lt;/code&gt;    // 删除远程仓库标签（首先从本地删除标签，然后再运行此命令）  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;推送标签&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git push origin tagName&lt;/code&gt;   // 推送标签至远程仓库&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git push origin --tags&lt;/code&gt;    // 推送全部尚未推送的标签至远程仓库  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;5. Custom Define&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;让Git显示颜色&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global color.ui true&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置别名&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global alias.customName orderName&lt;/code&gt;    // 设置命令order-name的别名custom-name&lt;br&gt;&lt;br&gt;
&lt;strong&gt;举例：&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global alias.cho checkout&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global alias.co commit&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global alias.br branch&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global alias.unstage &amp;#39;reset HEAD&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global alias.last &amp;#39;log -1&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global alias.superLog &amp;quot;log --color --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;注1：配置Git的时候，加上&lt;code&gt;--global&lt;/code&gt;是针对当前用户起作用的;如果不加，则只针对当前仓库起作用&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;注2：每个仓库的Git配置文件都放在.git/config文件中.&lt;br&gt;&lt;br&gt;
当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;6. Rebase&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git rebase -i commitId&lt;/code&gt;   // commitId为需要修改的commit的前一个commit的Id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit --amend&lt;/code&gt;   // 进入VIM修改Commit信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase --continue&lt;/code&gt;    // 修改完Commit Msg，继续操作命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gir rebase --abort&lt;/code&gt;   // 放弃本次rebase操作&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;7. Setting&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;系统级别Git配置文件：&lt;code&gt;/etc/gitconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用户级别Git配置文件：&lt;code&gt;~/.gitconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;项目级别Git配置文件：&lt;code&gt;&amp;lt;Project Path&amp;gt;/.git/config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name &amp;quot;Jack&amp;quot;&lt;/code&gt;   // 设置Git提交显示用户名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.email &amp;quot;jack@emai.com&amp;quot;&amp;quot;&lt;/code&gt;    // 设置Git提交显示邮箱&lt;br&gt;
&lt;strong&gt;&lt;em&gt;使用&lt;code&gt;--global&lt;/code&gt;选项，更改的是用户级别配置，去掉&lt;code&gt;--global&lt;/code&gt;选项更改的是项目级别配置&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;8. Sth else&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;find . -name &amp;quot;.git&amp;quot; | xargs rm -Rf&lt;/code&gt; // 删除Git仓库信息&lt;/li&gt;
&lt;/ol&gt;</content><category term="Skills" /><category term="Git" /><summary>Git Using Notes</summary></entry><entry><title>CocoaPods Using Notes</title><link href="http://127.0.0.1:4000/blog/CocoaPods-Using-Notes/" rel="alternate" type="text/html" title="CocoaPods Using Notes" /><published>2015-12-15T03:00:00+08:00</published><updated>2015-12-15T03:00:00+08:00</updated><id>http://127.0.0.1:4000/blog/CocoaPods-Using-Notes</id><content type="html" xml:base="http://127.0.0.1:4000/blog/CocoaPods-Using-Notes/">&lt;h1&gt;CocoaPods Using Notes&lt;/h1&gt;

&lt;h2&gt;1. Install&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MAC OS默认已有Ruby环境，所以可直接执行安装命令（升级CocoaPods也使用此命令）：&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ sudo gem install cocoapods&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装结束后，执行命令更新本地Pods依赖库Tree：&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ pod setup&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;1.1 可能遇到的问题&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;执行install命令无反应&lt;br&gt;&lt;br&gt;
这是因为Ruby默认源使用的是cocoapod.org，国内访问这个网址偶尔会有困难，可通过将Ruby源替换成淘宝来解决。替换命令如下：&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ gem sources --remove https://rubygems.org/&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ gem sources -a https://taobao.org/&lt;/code&gt;&lt;br&gt;&lt;br&gt;
执行命令&lt;code&gt;gem sources -l&lt;/code&gt; 来查看是否替换成功，正常输出如下：  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;*** CURRENT SOURCES ***&lt;br&gt;&lt;br&gt;
&lt;a href=&quot;https://ruby.taobao.org/&quot;&gt;https://ruby.taobao.org/&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gem版本过于陈旧&lt;br&gt;&lt;br&gt;
如果gem版本过于陈旧，也有可能会导致安装CocoaPods失败，可通过如下命令升级gem：&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ sudo gem update --system&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;2. Usage&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;切换至工程目录下，执行命令创建Podfile文件：&lt;br&gt;&lt;br&gt;
&lt;code&gt;touch Podfile&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编辑Podfile文件，写入需要的第三方库信息，示例如下：  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;platform :ios, &amp;#39;7.0&amp;#39;&lt;br&gt;&lt;br&gt;
inhibit_all_warnings!&lt;br&gt;&lt;br&gt;
pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;~&amp;gt; 2.6.0&amp;#39;&lt;br&gt;&lt;br&gt;
pod &amp;#39;Reachability&amp;#39;, &amp;#39;~&amp;gt; 3.2&amp;#39;&lt;br&gt;&lt;br&gt;
pod &amp;#39;Masonry&amp;#39;, &amp;#39;~&amp;gt; 0.6.3&amp;#39;&lt;br&gt;&lt;br&gt;
pod &amp;#39;SDWebImage&amp;#39;, &amp;#39;~&amp;gt; 3.7.3&amp;#39;&lt;br&gt;&lt;br&gt;
pod &amp;#39;MBProgressHUD&amp;#39;, &amp;#39;~&amp;gt; 0.9.1&amp;#39;&lt;br&gt;&lt;br&gt;
pod &amp;#39;IQKeyboardManager&amp;#39;, &amp;#39;~&amp;gt; 3.3.2&amp;#39;  &lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;导入第三方库，命令如下：&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ pod install&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;2.1 关于Podfile&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Podfile文件并非必须放置在当前工程文件中，可以放置在任意一个目录下，想要这么做只需在Podfile文件中指定工程文件的路劲即可，在Podfile文件最开始增加一行内容：&lt;br&gt;&lt;br&gt;
&lt;code&gt;xcodeproj &amp;quot;/Users/xxx/xxx/Project/Project.xcodeproj&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;br&gt;
然后进入Podfile文件所在路劲，执行pod install命令下载指定第三方库。  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果不显式指定Podfile对应的Target，CocoaPods默认指向我们工程中的第一个Target。换句话说，默认只有工程中的第一个Target能够使用Podfile中描述的Pod依赖库。如果想让一个Podfile文件同时描述工程中多个Target，可使用如下方法：  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多个Target使用相同Pods依赖库，可通过使用&lt;code&gt;link_with&lt;/code&gt;关键字实现，在Podfile文件首行添加如下内容：&lt;br&gt;
&lt;code&gt;link_with &amp;#39;Target_1&amp;#39;, &amp;#39;Target_2&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;不同Target使用不同Pods依赖库，此时可通过使用&lt;code&gt;target&lt;/code&gt;关键字实现，Podfile文件描述如下(其中do/end作为开始和结束的标识符)：&lt;br&gt;
&amp;gt;   target :&amp;#39;Target_1&amp;#39; do&lt;br&gt;
platform :ios&lt;br&gt;
pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;~&amp;gt; 2.6.0&amp;#39;&lt;br&gt;
pod &amp;#39;Reachability&amp;#39;, &amp;#39;~&amp;gt; 3.2&amp;#39;&lt;br&gt;
platform :ios, &amp;#39;7.0&amp;#39;&lt;br&gt;
pod &amp;#39;SDWebImage&amp;#39;, &amp;#39;~&amp;gt; 3.7.3&amp;#39;&lt;br&gt;
end&lt;br&gt;
target :&amp;#39;Target_2&amp;#39; do&lt;br&gt;
pod &amp;#39;Masonry&amp;#39;, &amp;#39;~&amp;gt; 0.6.3&amp;#39;&lt;br&gt;
end&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Podfile中指定依赖库版本，具体写法和标识含义如下：  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;pod &amp;#39;AFNetworking&amp;#39;  //不显式指定依赖库版本，表示每次都获取最新版本&lt;br&gt;&lt;br&gt;
pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;2.0&amp;#39;   //只使用2.0版本&lt;br&gt;&lt;br&gt;
pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;&amp;gt; 2.0&amp;#39; //使用高于2.0的版本&lt;br&gt;&lt;br&gt;
pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;&amp;gt;= 2.0&amp;#39;    //使用大于或等于2.0的版本&lt;br&gt;&lt;br&gt;
pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;&amp;lt; 2.0&amp;#39; //使用小于2.0的版本&lt;br&gt;&lt;br&gt;
pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;&amp;lt;= 2.0&amp;#39;    //使用小于或等于2.0的版本&lt;br&gt;&lt;br&gt;
pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;~&amp;gt; 0.1.2&amp;#39;  //使用大于等于0.1.2但小于0.2的版本&lt;br&gt;&lt;br&gt;
pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;~&amp;gt;0.1&amp;#39; //使用大于等于0.1但小于1.0的版本&lt;br&gt;&lt;br&gt;
pod &amp;#39;AFNetworking&amp;#39;, &amp;#39;~&amp;gt;0&amp;#39;   //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本  &lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;2.2 相关命令&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;pod install&lt;/strong&gt;&lt;br&gt;
根据Podfile文件指定的内容，安装依赖库，如果有Podfile.lock文件而且对应的Podfile文件未被修改，则会根据Podfile.lock文件指定的版本安装。 
每次更新了Podfile文件时，都需要重新执行该命令，以便重新安装Pods依赖库。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pod update&lt;/strong&gt;&lt;br&gt;
若果Podfile中指定的依赖库版本不是写死的，当对应的依赖库有了更新，无论有没有Podfile.lock文件都会去获取Podfile文件描述的允许获取到的最新依赖库版本。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pod search&lt;/strong&gt;&lt;br&gt;
该命令是用来按名称搜索可用的Pods依赖库&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pod setup&lt;/strong&gt;&lt;br&gt;
该命令用于更新本地电脑上的保存的Pods依赖库Tree。&lt;br&gt;
由于每天有很多人会创建或者更新Pods依赖库，这条命令执行的时候会异常耗时。我们需要经常执行这条命令，否则有新的Pods依赖库时执行pod search命令是搜不出来的。&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;3. 制作部分&lt;/h2&gt;

&lt;h3&gt;3.1 创建GitHub公有仓库&lt;/h3&gt;

&lt;p&gt;过程略  &lt;/p&gt;

&lt;h3&gt;3.2 Clone远程仓库到本地&lt;/h3&gt;

&lt;p&gt;过程略  &lt;/p&gt;

&lt;h3&gt;3.3 向本地仓库添加创建Pods依赖库所需的文件&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;podspec类型文件&lt;/strong&gt;：该文件为Pods依赖库的描述文件，每个Pods依赖库都必须有且仅能有这么一个描述文件。文件名称需要和创建的依赖库名称保持一致，即example.podspec。&lt;br&gt;
创建命令如下：&lt;br&gt;
&lt;code&gt;$ pod spec create example.podspec&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LICENSE文件&lt;/strong&gt;：CocoaPods强制要求所有的Pods依赖库都必须要有license文件，否则通不过验证。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类文件&lt;/strong&gt;：将类文件放入与依赖库名称（example）相同的文件夹中。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Demo&lt;/strong&gt;：为了使用户能够快速掌握我们的依赖库，通常需要提供一个Demo工程。将创建的Demo工程放入名为exampleDemo文件夹中。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;README.md&lt;/strong&gt;：一个成功的GitHub仓库必不可少的一部分，使用Markdown标记语言，用于描述对仓库的详细说明。&lt;br&gt;
&lt;strong&gt;&lt;em&gt;注意：其中1. 2. 3. 是必需的，4. 5. 是可选的，不过强烈建议全部创建&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;3.4 提交本地仓库修改至GitHub&lt;/h3&gt;

&lt;p&gt;过程略  &lt;/p&gt;

&lt;h3&gt;3.5 发布至CocoaPods(Trunk方式)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注册trunk&lt;br&gt;&lt;br&gt;
&lt;code&gt;pod trunk register example@email.com &amp;#39;yourName&amp;#39;  --verbose&lt;/code&gt;    // --verbose参数是为了便于输出注册过程中的调试信息&lt;br&gt;&lt;br&gt;
执行完命令，注册邮箱会收到一封带有验证链接的邮件，请点击确认。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询注册信息&lt;br&gt;&lt;br&gt;
&lt;code&gt;pod trunk me&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提交podspec文件&lt;br&gt;&lt;br&gt;
&lt;code&gt;pod trunk push example.podspec&lt;/code&gt;    // 此命令会首先验证podspec文件是否合法，检测合法后上传至trunk服务器&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：以前CocoaPods团队的审核时间需要一到两个工作日，现在只需要几秒钟即可完成，而且会自动更新本地Pods依赖库Tree，提交完成使用&lt;code&gt;pod search&lt;/code&gt;命令即可立即查询到自己提交的pod库&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;3.6 发布至CocoaPods(Pull Request方式)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;(此种&lt;code&gt;Pull Request&lt;/code&gt;的发布方式已被CocoaPods官方废弃，请使用&lt;code&gt;Trunk&lt;/code&gt;的发布方式）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;执行如下命令,为Pods依赖库添加版本号和标签号：&lt;br&gt;
&lt;code&gt;$ set the new version to 1.0.0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ set the new tag to 1.0.0&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行Pod验证命令：&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ pod lib lint&lt;/code&gt;&lt;br&gt;&lt;br&gt;
如果一切正常，此命令执行完后会出现如下输出：  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-&amp;gt; example (1.0.0)&lt;br&gt;&lt;br&gt;
example passed validation.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;至此，Pod验证成功。&lt;br&gt;
&lt;strong&gt;&lt;em&gt;注意：在执行Pod验证命令时，log信息中出现任何warning/error信息，验证都会失败！可根据log信息做出响应修改后在此验证&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fork一份CocoaPods官方的Specs仓库&lt;br&gt;&lt;br&gt;
过程略  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;clone刚才fork的仓库到本地&lt;br&gt;&lt;br&gt;
过程略  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将自己的podspec文件添加到本地Specs仓库中&lt;br&gt;&lt;br&gt;
podspec文件在Specs仓库中的保存原则是：&lt;strong&gt;Pods依赖库同名文件夹---&amp;gt;版本号同名文件夹---&amp;gt;podspec文件&lt;/strong&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提交本地Specs仓库中的修改到GitHub仓库&lt;br&gt;&lt;br&gt;
过程略  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将自己fork的Specs仓库所做的修改pull给CocoaPods官方的Specs仓库&lt;br&gt;&lt;br&gt;
过程略  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;等待CocoaPods维护人员审核通过，并将我们的pull请求合并到官方Specs仓库中。&lt;strong&gt;有任何消息，CocoaPods都会发邮件通知&lt;/strong&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过审核后，执行&lt;code&gt;$ pod set&lt;/code&gt;命令更新本地依赖库Tree，随后使用搜索命令&lt;code&gt;$ pod search&lt;/code&gt;搜索我们创建的Pods依赖库，就能找到对应的信息了！  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="iOS" /><category term="CocoaPods" /><summary>CocoaPods Using Notes</summary></entry></feed>
